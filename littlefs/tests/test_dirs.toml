[cases.test_dirs_root]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_many_creation]
defines.N = 'range(3, 100, 3)'
if = 'N < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "dir%03d", i);
        dbc_lfs_mkdir(&lfs, path) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "dir%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_many_removal]
defines.N = 'range(3, 100, 11)'
if = 'N < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "removeme%03d", i);
        dbc_lfs_mkdir(&lfs, path) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "removeme%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "removeme%03d", i);
        dbc_lfs_remove(&lfs, path) => 0;
    }
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_many_rename]
defines.N = 'range(3, 100, 11)'
if = 'N < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "test%03d", i);
        dbc_lfs_mkdir(&lfs, path) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "test%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char oldpath[128];
        char newpath[128];
        sprintf(oldpath, "test%03d", i);
        sprintf(newpath, "tedd%03d", i);
        dbc_lfs_rename(&lfs, oldpath, newpath) => 0;
    }
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "tedd%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);
'''

[cases.test_dirs_many_reentrant]
defines.N = [5, 11]
if = 'BLOCK_COUNT >= 4*N'
reentrant = true
defines.POWERLOSS_BEHAVIOR = [
    'DBC_LFS_EMUBD_POWERLOSS_NOOP',
    'DBC_LFS_EMUBD_POWERLOSS_OOO',
]
code = '''
    dbc_lfs_t lfs;
    int err = dbc_lfs_mount(&lfs, cfg);
    if (err) {
        dbc_lfs_format(&lfs, cfg) => 0;
        dbc_lfs_mount(&lfs, cfg) => 0;
    }

    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hi%03d", i);
        err = dbc_lfs_mkdir(&lfs, path);
        assert(err == 0 || err == DBC_LFS_ERR_EXIST);
    }

    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hello%03d", i);
        err = dbc_lfs_remove(&lfs, path);
        assert(err == 0 || err == DBC_LFS_ERR_NOENT);
    }

    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hi%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;

    for (int i = 0; i < N; i++) {
        char oldpath[128];
        char newpath[128];
        sprintf(oldpath, "hi%03d", i);
        sprintf(newpath, "hello%03d", i);
        // YES this can overwrite an existing newpath
        dbc_lfs_rename(&lfs, oldpath, newpath) => 0;
    }

    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hello%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;

    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hello%03d", i);
        dbc_lfs_remove(&lfs, path) => 0;
    }

    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_file_creation]
defines.N = 'range(3, 100, 11)'
if = 'N < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "file%03d", i);
        dbc_lfs_file_t file;
        dbc_lfs_file_open(&lfs, &file, path,
                DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => 0;
        dbc_lfs_file_close(&lfs, &file) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "file%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_REG);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);
'''

[cases.test_dirs_file_removal]
defines.N = 'range(3, 100, 11)'
if = 'N < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "removeme%03d", i);
        dbc_lfs_file_t file;
        dbc_lfs_file_open(&lfs, &file, path,
                DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => 0;
        dbc_lfs_file_close(&lfs, &file) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "removeme%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_REG);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "removeme%03d", i);
        dbc_lfs_remove(&lfs, path) => 0;
    }
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_file_rename]
defines.N = 'range(3, 100, 11)'
if = 'N < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "test%03d", i);
        dbc_lfs_file_t file;
        dbc_lfs_file_open(&lfs, &file, path,
                DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => 0;
        dbc_lfs_file_close(&lfs, &file) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "test%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_REG);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < N; i++) {
        char oldpath[128];
        char newpath[128];
        sprintf(oldpath, "test%03d", i);
        sprintf(newpath, "tedd%03d", i);
        dbc_lfs_rename(&lfs, oldpath, newpath) => 0;
    }
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "tedd%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_REG);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);
'''

[cases.test_dirs_file_reentrant]
defines.N = [5, 25]
if = 'N < BLOCK_COUNT/2'
reentrant = true
defines.POWERLOSS_BEHAVIOR = [
    'DBC_LFS_EMUBD_POWERLOSS_NOOP',
    'DBC_LFS_EMUBD_POWERLOSS_OOO',
]
code = '''
    dbc_lfs_t lfs;
    int err = dbc_lfs_mount(&lfs, cfg);
    if (err) {
        dbc_lfs_format(&lfs, cfg) => 0;
        dbc_lfs_mount(&lfs, cfg) => 0;
    }

    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hi%03d", i);
        dbc_lfs_file_t file;
        dbc_lfs_file_open(&lfs, &file, path, DBC_LFS_O_CREAT | DBC_LFS_O_WRONLY) => 0;
        dbc_lfs_file_close(&lfs, &file) => 0;
    }

    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hello%03d", i);
        err = dbc_lfs_remove(&lfs, path);
        assert(err == 0 || err == DBC_LFS_ERR_NOENT);
    }

    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hi%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_REG);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;

    for (int i = 0; i < N; i++) {
        char oldpath[128];
        char newpath[128];
        sprintf(oldpath, "hi%03d", i);
        sprintf(newpath, "hello%03d", i);
        // YES this can overwrite an existing newpath
        dbc_lfs_rename(&lfs, oldpath, newpath) => 0;
    }

    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hello%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_REG);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;

    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "hello%03d", i);
        dbc_lfs_remove(&lfs, path) => 0;
    }

    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_nested]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "potato") => 0;
    dbc_lfs_file_t file;
    dbc_lfs_file_open(&lfs, &file, "burito",
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => 0;
    dbc_lfs_file_close(&lfs, &file) => 0;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "potato/baked") => 0;
    dbc_lfs_mkdir(&lfs, "potato/sweet") => 0;
    dbc_lfs_mkdir(&lfs, "potato/fried") => 0;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "potato") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, ".") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "..") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "baked") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "fried") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "sweet") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;

    // try removing?
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_remove(&lfs, "potato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_unmount(&lfs) => 0;

    // try renaming?
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_rename(&lfs, "potato", "coldpotato") => 0;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_rename(&lfs, "coldpotato", "warmpotato") => 0;
    dbc_lfs_rename(&lfs, "warmpotato", "hotpotato") => 0;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_remove(&lfs, "potato") => DBC_LFS_ERR_NOENT;
    dbc_lfs_remove(&lfs, "coldpotato") => DBC_LFS_ERR_NOENT;
    dbc_lfs_remove(&lfs, "warmpotato") => DBC_LFS_ERR_NOENT;
    dbc_lfs_remove(&lfs, "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_unmount(&lfs) => 0;

    // try cross-directory renaming
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "coldpotato") => 0;
    dbc_lfs_rename(&lfs, "hotpotato/baked", "coldpotato/baked") => 0;
    dbc_lfs_rename(&lfs, "coldpotato", "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_remove(&lfs, "coldpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_remove(&lfs, "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_rename(&lfs, "hotpotato/fried", "coldpotato/fried") => 0;
    dbc_lfs_rename(&lfs, "coldpotato", "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_remove(&lfs, "coldpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_remove(&lfs, "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_rename(&lfs, "hotpotato/sweet", "coldpotato/sweet") => 0;
    dbc_lfs_rename(&lfs, "coldpotato", "hotpotato") => 0;
    dbc_lfs_remove(&lfs, "coldpotato") => DBC_LFS_ERR_NOENT;
    dbc_lfs_remove(&lfs, "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_open(&lfs, &dir, "hotpotato") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, ".") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "..") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "baked") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "fried") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "sweet") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
    
    // final remove
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_remove(&lfs, "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_remove(&lfs, "hotpotato/baked") => 0;
    dbc_lfs_remove(&lfs, "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_remove(&lfs, "hotpotato/fried") => 0;
    dbc_lfs_remove(&lfs, "hotpotato") => DBC_LFS_ERR_NOTEMPTY;
    dbc_lfs_remove(&lfs, "hotpotato/sweet") => 0;
    dbc_lfs_remove(&lfs, "hotpotato") => 0;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, ".") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "..") == 0);
    info.type => DBC_LFS_TYPE_DIR;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "burito") == 0);
    info.type => DBC_LFS_TYPE_REG;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_recursive_remove]
defines.N = [10, 100]
if = 'N < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "prickly-pear") => 0;
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "prickly-pear/cactus%03d", i);
        dbc_lfs_mkdir(&lfs, path) => 0;
    }
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "prickly-pear") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "cactus%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs);

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_remove(&lfs, "prickly-pear") => DBC_LFS_ERR_NOTEMPTY;

    dbc_lfs_dir_open(&lfs, &dir, "prickly-pear") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    for (int i = 0; i < N; i++) {
        char path[1024];
        sprintf(path, "cactus%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(info.type == DBC_LFS_TYPE_DIR);
        assert(strcmp(info.name, path) == 0);
        sprintf(path, "prickly-pear/%s", info.name);
        dbc_lfs_remove(&lfs, path) => 0;
    }
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;

    dbc_lfs_remove(&lfs, "prickly-pear") => 0;
    dbc_lfs_remove(&lfs, "prickly-pear") => DBC_LFS_ERR_NOENT;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_remove(&lfs, "prickly-pear") => DBC_LFS_ERR_NOENT;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_other_errors]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "potato") => 0;
    dbc_lfs_file_t file;
    dbc_lfs_file_open(&lfs, &file, "burito",
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => 0;
    dbc_lfs_file_close(&lfs, &file) => 0;
    dbc_lfs_unmount(&lfs) => 0;

    dbc_lfs_mount(&lfs, cfg) => 0;

    dbc_lfs_mkdir(&lfs, "potato") => DBC_LFS_ERR_EXIST;
    dbc_lfs_mkdir(&lfs, "burito") => DBC_LFS_ERR_EXIST;
    dbc_lfs_file_open(&lfs, &file, "burito",
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => DBC_LFS_ERR_EXIST;
    dbc_lfs_file_open(&lfs, &file, "potato",
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => DBC_LFS_ERR_EXIST;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "tomato") => DBC_LFS_ERR_NOENT;
    dbc_lfs_dir_open(&lfs, &dir, "burito") => DBC_LFS_ERR_NOTDIR;
    dbc_lfs_file_open(&lfs, &file, "tomato", DBC_LFS_O_RDONLY) => DBC_LFS_ERR_NOENT;
    dbc_lfs_file_open(&lfs, &file, "potato", DBC_LFS_O_RDONLY) => DBC_LFS_ERR_ISDIR;
    dbc_lfs_file_open(&lfs, &file, "tomato", DBC_LFS_O_WRONLY) => DBC_LFS_ERR_NOENT;
    dbc_lfs_file_open(&lfs, &file, "potato", DBC_LFS_O_WRONLY) => DBC_LFS_ERR_ISDIR;
    dbc_lfs_file_open(&lfs, &file, "potato",
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT) => DBC_LFS_ERR_ISDIR;

    dbc_lfs_file_open(&lfs, &file, "tacoto", DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT) => 0;
    dbc_lfs_file_close(&lfs, &file) => 0;
    dbc_lfs_rename(&lfs, "tacoto", "potato") => DBC_LFS_ERR_ISDIR;
    dbc_lfs_rename(&lfs, "potato", "tacoto") => DBC_LFS_ERR_NOTDIR;

    dbc_lfs_mkdir(&lfs, "/") => DBC_LFS_ERR_EXIST;
    dbc_lfs_file_open(&lfs, &file, "/",
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT | DBC_LFS_O_EXCL) => DBC_LFS_ERR_EXIST;
    dbc_lfs_file_open(&lfs, &file, "/", DBC_LFS_O_RDONLY) => DBC_LFS_ERR_ISDIR;
    dbc_lfs_file_open(&lfs, &file, "/", DBC_LFS_O_WRONLY) => DBC_LFS_ERR_ISDIR;
    dbc_lfs_file_open(&lfs, &file, "/",
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT) => DBC_LFS_ERR_ISDIR;

    // check that errors did not corrupt directory
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_REG);
    assert(strcmp(info.name, "burito") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "potato") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_REG);
    assert(strcmp(info.name, "tacoto") == 0);
    assert(info.size == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;

    dbc_lfs_unmount(&lfs) => 0;

    // or on disk
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, ".") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "..") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_REG);
    assert(strcmp(info.name, "burito") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_DIR);
    assert(strcmp(info.name, "potato") == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(info.type == DBC_LFS_TYPE_REG);
    assert(strcmp(info.name, "tacoto") == 0);
    assert(info.size == 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;
    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_seek]
defines.COUNT = [4, 128, 132]
if = 'COUNT < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "hello") => 0;
    for (int i = 0; i < COUNT; i++) {
        char path[1024];
        sprintf(path, "hello/kitty%03d", i);
        dbc_lfs_mkdir(&lfs, path) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    // try seeking to each dir entry
    for (int j = 0; j < COUNT; j++) {
        dbc_lfs_mount(&lfs, cfg) => 0;
        dbc_lfs_dir_t dir;
        dbc_lfs_dir_open(&lfs, &dir, "hello") => 0;
        struct dbc_lfs_info info;
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, ".") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, "..") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        for (int i = 0; i < j; i++) {
            char path[1024];
            sprintf(path, "kitty%03d", i);
            dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
            assert(strcmp(info.name, path) == 0);
            assert(info.type == DBC_LFS_TYPE_DIR);
        }
        dbc_lfs_soff_t pos = dbc_lfs_dir_tell(&lfs, &dir);
        assert(pos >= 0);

        dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
        char path[1024];
        sprintf(path, "kitty%03d", j);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        dbc_lfs_dir_rewind(&lfs, &dir) => 0;
        sprintf(path, "kitty%03u", 0);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, ".") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, "..") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
        sprintf(path, "kitty%03d", j);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        dbc_lfs_dir_close(&lfs, &dir) => 0;
        dbc_lfs_unmount(&lfs) => 0;
    }

    // try seeking to end of dir
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "hello") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, ".") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "..") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);

    for (int i = 0; i < COUNT; i++) {
        char path[1024];
        sprintf(path, "kitty%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
    }
    dbc_lfs_soff_t pos = dbc_lfs_dir_tell(&lfs, &dir);
    assert(pos >= 0);

    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;

    dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;

    dbc_lfs_dir_rewind(&lfs, &dir) => 0;
    char path[1024];
    sprintf(path, "kitty%03d", 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, ".") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "..") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, path) == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);

    dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;

    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

[cases.test_dirs_toot_seek]
defines.COUNT = [4, 128, 132]
if = 'COUNT < BLOCK_COUNT/2'
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    for (int i = 0; i < COUNT; i++) {
        char path[1024];
        sprintf(path, "hi%03d", i);
        dbc_lfs_mkdir(&lfs, path) => 0;
    }
    dbc_lfs_unmount(&lfs) => 0;

    for (int j = 0; j < COUNT; j++) {
        dbc_lfs_mount(&lfs, cfg) => 0;
        dbc_lfs_dir_t dir;
        dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
        struct dbc_lfs_info info;
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, ".") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, "..") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        for (int i = 0; i < j; i++) {
            char path[1024];
            sprintf(path, "hi%03d", i);
            dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
            assert(strcmp(info.name, path) == 0);
            assert(info.type == DBC_LFS_TYPE_DIR);
        }
        dbc_lfs_soff_t pos = dbc_lfs_dir_tell(&lfs, &dir);
        assert(pos >= 0);

        dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
        char path[1024];
        sprintf(path, "hi%03d", j);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        dbc_lfs_dir_rewind(&lfs, &dir) => 0;
        sprintf(path, "hi%03u", 0);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, ".") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, "..") == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
        sprintf(path, "hi%03d", j);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);

        dbc_lfs_dir_close(&lfs, &dir) => 0;
        dbc_lfs_unmount(&lfs) => 0;
    }

    // try seeking to end of dir
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_dir_t dir;
    dbc_lfs_dir_open(&lfs, &dir, "/") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, ".") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "..") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);

    for (int i = 0; i < COUNT; i++) {
        char path[1024];
        sprintf(path, "hi%03d", i);
        dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
        assert(strcmp(info.name, path) == 0);
        assert(info.type == DBC_LFS_TYPE_DIR);
    }
    dbc_lfs_soff_t pos = dbc_lfs_dir_tell(&lfs, &dir);
    assert(pos >= 0);

    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;

    dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;

    dbc_lfs_dir_rewind(&lfs, &dir) => 0;
    char path[1024];
    sprintf(path, "hi%03d", 0);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, ".") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, "..") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_dir_read(&lfs, &dir, &info) => 1;
    assert(strcmp(info.name, path) == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);

    dbc_lfs_dir_seek(&lfs, &dir, pos) => 0;
    dbc_lfs_dir_read(&lfs, &dir, &info) => 0;

    dbc_lfs_dir_close(&lfs, &dir) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

