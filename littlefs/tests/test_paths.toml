
# simple path test
[cases.test_paths_normal]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "tea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/hottea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/warmtea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/coldtea") => 0;

    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "/tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);

    dbc_lfs_mkdir(&lfs, "/milk") => 0;
    dbc_lfs_stat(&lfs, "/milk", &info) => 0;
    assert(strcmp(info.name, "milk") == 0);
    dbc_lfs_stat(&lfs, "milk", &info) => 0;
    assert(strcmp(info.name, "milk") == 0);
    dbc_lfs_unmount(&lfs) => 0;
'''

# redundant slashes
[cases.test_paths_redundant_slashes]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "tea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/hottea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/warmtea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/coldtea") => 0;

    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "/tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "//tea//hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "///tea///hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);

    dbc_lfs_mkdir(&lfs, "////milk") => 0;
    dbc_lfs_stat(&lfs, "////milk", &info) => 0;
    assert(strcmp(info.name, "milk") == 0);
    dbc_lfs_stat(&lfs, "milk", &info) => 0;
    assert(strcmp(info.name, "milk") == 0);
    dbc_lfs_unmount(&lfs) => 0;
'''

# dot path test
[cases.test_paths_dot]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "tea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/hottea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/warmtea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/coldtea") => 0;

    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "./tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "/./tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "/././tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "/./tea/./hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);

    dbc_lfs_mkdir(&lfs, "/./milk") => 0;
    dbc_lfs_stat(&lfs, "/./milk", &info) => 0;
    assert(strcmp(info.name, "milk") == 0);
    dbc_lfs_stat(&lfs, "milk", &info) => 0;
    assert(strcmp(info.name, "milk") == 0);
    dbc_lfs_unmount(&lfs) => 0;
'''

# dot dot path test
[cases.test_paths_dot_dot]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "tea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/hottea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/warmtea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/coldtea") => 0;
    dbc_lfs_mkdir(&lfs, "coffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/hotcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/warmcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/coldcoffee") => 0;

    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "coffee/../tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "tea/coldtea/../hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "coffee/coldcoffee/../../tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "coffee/../coffee/../tea/hottea", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);

    dbc_lfs_mkdir(&lfs, "coffee/../milk") => 0;
    dbc_lfs_stat(&lfs, "coffee/../milk", &info) => 0;
    strcmp(info.name, "milk") => 0;
    dbc_lfs_stat(&lfs, "milk", &info) => 0;
    strcmp(info.name, "milk") => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

# trailing dot path test
[cases.test_paths_trailing_dot]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "tea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/hottea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/warmtea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/coldtea") => 0;

    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "tea/hottea/", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "tea/hottea/.", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "tea/hottea/./.", &info) => 0;
    assert(strcmp(info.name, "hottea") == 0);
    dbc_lfs_stat(&lfs, "tea/hottea/..", &info) => 0;
    assert(strcmp(info.name, "tea") == 0);
    dbc_lfs_stat(&lfs, "tea/hottea/../.", &info) => 0;
    assert(strcmp(info.name, "tea") == 0);
    dbc_lfs_unmount(&lfs) => 0;
'''

# leading dot path test
[cases.test_paths_leading_dot]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, ".milk") => 0;
    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, ".milk", &info) => 0;
    strcmp(info.name, ".milk") => 0;
    dbc_lfs_stat(&lfs, "tea/.././.milk", &info) => 0;
    strcmp(info.name, ".milk") => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

# root dot dot path test
[cases.test_paths_root_dot_dot]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "tea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/hottea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/warmtea") => 0;
    dbc_lfs_mkdir(&lfs, "tea/coldtea") => 0;
    dbc_lfs_mkdir(&lfs, "coffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/hotcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/warmcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/coldcoffee") => 0;

    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "coffee/../../../../../../tea/hottea", &info) => 0;
    strcmp(info.name, "hottea") => 0;

    dbc_lfs_mkdir(&lfs, "coffee/../../../../../../milk") => 0;
    dbc_lfs_stat(&lfs, "coffee/../../../../../../milk", &info) => 0;
    strcmp(info.name, "milk") => 0;
    dbc_lfs_stat(&lfs, "milk", &info) => 0;
    strcmp(info.name, "milk") => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

# invalid path tests
[cases.test_paths_invalid]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg);
    dbc_lfs_mount(&lfs, cfg) => 0;
    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "dirt", &info) => DBC_LFS_ERR_NOENT;
    dbc_lfs_stat(&lfs, "dirt/ground", &info) => DBC_LFS_ERR_NOENT;
    dbc_lfs_stat(&lfs, "dirt/ground/earth", &info) => DBC_LFS_ERR_NOENT;

    dbc_lfs_remove(&lfs, "dirt") => DBC_LFS_ERR_NOENT;
    dbc_lfs_remove(&lfs, "dirt/ground") => DBC_LFS_ERR_NOENT;
    dbc_lfs_remove(&lfs, "dirt/ground/earth") => DBC_LFS_ERR_NOENT;

    dbc_lfs_mkdir(&lfs, "dirt/ground") => DBC_LFS_ERR_NOENT;
    dbc_lfs_file_t file;
    dbc_lfs_file_open(&lfs, &file, "dirt/ground", DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT)
            => DBC_LFS_ERR_NOENT;
    dbc_lfs_mkdir(&lfs, "dirt/ground/earth") => DBC_LFS_ERR_NOENT;
    dbc_lfs_file_open(&lfs, &file, "dirt/ground/earth", DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT)
            => DBC_LFS_ERR_NOENT;
    dbc_lfs_unmount(&lfs) => 0;
'''

# root operations
[cases.test_paths_root]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "/", &info) => 0;
    assert(strcmp(info.name, "/") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);

    dbc_lfs_mkdir(&lfs, "/") => DBC_LFS_ERR_EXIST;
    dbc_lfs_file_t file;
    dbc_lfs_file_open(&lfs, &file, "/", DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT)
            => DBC_LFS_ERR_ISDIR;

    dbc_lfs_remove(&lfs, "/") => DBC_LFS_ERR_INVAL;
    dbc_lfs_unmount(&lfs) => 0;
'''

# root representations
[cases.test_paths_root_reprs]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "/", &info) => 0;
    assert(strcmp(info.name, "/") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_stat(&lfs, "", &info) => 0;
    assert(strcmp(info.name, "/") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_stat(&lfs, ".", &info) => 0;
    assert(strcmp(info.name, "/") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_stat(&lfs, "..", &info) => 0;
    assert(strcmp(info.name, "/") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_stat(&lfs, "//", &info) => 0;
    assert(strcmp(info.name, "/") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_stat(&lfs, "./", &info) => 0;
    assert(strcmp(info.name, "/") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_unmount(&lfs) => 0;
'''

# superblock conflict test
[cases.test_paths_superblock_conflict]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    struct dbc_lfs_info info;
    dbc_lfs_stat(&lfs, "littlefs", &info) => DBC_LFS_ERR_NOENT;
    dbc_lfs_remove(&lfs, "littlefs") => DBC_LFS_ERR_NOENT;

    dbc_lfs_mkdir(&lfs, "littlefs") => 0;
    dbc_lfs_stat(&lfs, "littlefs", &info) => 0;
    assert(strcmp(info.name, "littlefs") == 0);
    assert(info.type == DBC_LFS_TYPE_DIR);
    dbc_lfs_remove(&lfs, "littlefs") => 0;
    dbc_lfs_stat(&lfs, "littlefs", &info) => DBC_LFS_ERR_NOENT;
    dbc_lfs_unmount(&lfs) => 0;
'''

# max path test
[cases.test_paths_max]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "coffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/hotcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/warmcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/coldcoffee") => 0;

    char path[1024];
    memset(path, 'w', DBC_LFS_NAME_MAX+1);
    path[DBC_LFS_NAME_MAX+1] = '\0';
    dbc_lfs_mkdir(&lfs, path) => DBC_LFS_ERR_NAMETOOLONG;
    dbc_lfs_file_t file;
    dbc_lfs_file_open(&lfs, &file, path, DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT)
            => DBC_LFS_ERR_NAMETOOLONG;

    memcpy(path, "coffee/", strlen("coffee/"));
    memset(path+strlen("coffee/"), 'w', DBC_LFS_NAME_MAX+1);
    path[strlen("coffee/")+DBC_LFS_NAME_MAX+1] = '\0';
    dbc_lfs_mkdir(&lfs, path) => DBC_LFS_ERR_NAMETOOLONG;
    dbc_lfs_file_open(&lfs, &file, path, DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT)
            => DBC_LFS_ERR_NAMETOOLONG;
    dbc_lfs_unmount(&lfs) => 0;
'''

# really big path test
[cases.test_paths_really_big]
code = '''
    dbc_lfs_t lfs;
    dbc_lfs_format(&lfs, cfg) => 0;
    dbc_lfs_mount(&lfs, cfg) => 0;
    dbc_lfs_mkdir(&lfs, "coffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/hotcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/warmcoffee") => 0;
    dbc_lfs_mkdir(&lfs, "coffee/coldcoffee") => 0;

    char path[1024];
    memset(path, 'w', DBC_LFS_NAME_MAX);
    path[DBC_LFS_NAME_MAX] = '\0';
    dbc_lfs_mkdir(&lfs, path) => 0;
    dbc_lfs_remove(&lfs, path) => 0;
    dbc_lfs_file_t file;
    dbc_lfs_file_open(&lfs, &file, path,
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT) => 0;
    dbc_lfs_file_close(&lfs, &file) => 0;
    dbc_lfs_remove(&lfs, path) => 0;

    memcpy(path, "coffee/", strlen("coffee/"));
    memset(path+strlen("coffee/"), 'w', DBC_LFS_NAME_MAX);
    path[strlen("coffee/")+DBC_LFS_NAME_MAX] = '\0';
    dbc_lfs_mkdir(&lfs, path) => 0;
    dbc_lfs_remove(&lfs, path) => 0;
    dbc_lfs_file_open(&lfs, &file, path,
            DBC_LFS_O_WRONLY | DBC_LFS_O_CREAT) => 0;
    dbc_lfs_file_close(&lfs, &file) => 0;
    dbc_lfs_remove(&lfs, path) => 0;
    dbc_lfs_unmount(&lfs) => 0;
'''

